.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_customisations_plot_shade_gradient.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_examples_customisations_plot_shade_gradient.py:


==============
Shade Gradient
==============

Control contour contrast!

To help make your confidence levels more obvious, you can play with the gradient steepness and
resulting contrast in your contours.



.. image:: /examples/customisations/images/sphx_glr_plot_shade_gradient_001.png
    :alt: plot shade gradient
    :class: sphx-glr-single-img






.. code-block:: default


    import numpy as np
    from numpy.random import multivariate_normal
    from chainconsumer import ChainConsumer

    np.random.seed(0)
    data1 = multivariate_normal([0, 0], [[1, 0], [0, 1]], size=1000000)
    data2 = multivariate_normal([4, -4], [[1, 0], [0, 1]], size=1000000)

    c = ChainConsumer()
    c.add_chain(data1, parameters=["$x$", "$y$"])
    c.add_chain(data2, parameters=["$x$", "$y$"])
    c.configure(shade_gradient=[0.1, 3.0], colors=['o', 'k'], sigmas=[0, 1, 2, 3], shade_alpha=1.0)
    fig = c.plotter.plot()

    fig.set_size_inches(3 + fig.get_size_inches())  # Resize fig for doco. You don't need this.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.676 seconds)


.. _sphx_glr_download_examples_customisations_plot_shade_gradient.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_shade_gradient.py <plot_shade_gradient.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_shade_gradient.ipynb <plot_shade_gradient.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
