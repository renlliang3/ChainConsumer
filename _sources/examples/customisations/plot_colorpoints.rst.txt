.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_customisations_plot_colorpoints.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_examples_customisations_plot_colorpoints.py:


=============
Colour Points
=============

Add colour scatter to show an extra dimension.

If we have a secondary parameter that might not be best displayed
as a posterior surface and would be useful to instead give
context to other surfaces, we can select that point to give a
colour mapped scatter plot.

We can *also* display this as a posterior surface by setting
`plot_colour_params=True`, if we wanted.


.. code-block:: default


    import numpy as np
    from numpy.random import normal, multivariate_normal
    from chainconsumer import ChainConsumer

    np.random.seed(1)
    cov = normal(size=(3, 3))
    data = multivariate_normal(normal(size=3), np.dot(cov, cov.T), size=100000)

    c = ChainConsumer().add_chain(data, parameters=["$x$", "$y$", "$z$"])
    c.configure(color_params="$z$")
    fig = c.plotter.plot(figsize=1.0)

    fig.set_size_inches(3 + fig.get_size_inches())  # Resize fig for doco. You don't need this.




.. image:: /examples/customisations/images/sphx_glr_plot_colorpoints_001.png
    :alt: $x = -0.3^{+1.9}_{-1.8}$, $y = 1.4^{+2.7}_{-2.6}$
    :class: sphx-glr-single-img





You can also plot the weights or posterior if they are specified. Showing weights here.


.. code-block:: default


    weights = 1 / (1 + data[:, 0]**2 + data[:, 1]**2)
    c = ChainConsumer().add_chain(data[:, :2], parameters=["$x$", "$y$"], weights=weights)
    c.configure(color_params="weights")
    fig = c.plotter.plot(figsize=3.0)

    fig.set_size_inches(3 + fig.get_size_inches())  # Resize fig for doco. You don't need this.




.. image:: /examples/customisations/images/sphx_glr_plot_colorpoints_002.png
    :alt: $x = 0.0^{+1.1}_{-1.2}$, $y = 0.2^{+1.6}_{-1.3}$
    :class: sphx-glr-single-img





And showing the posterior color parameter here


.. code-block:: default


    weights = 1 / (1 + data[:, 0]**2 + data[:, 1]**2)
    posterior = np.log(weights)
    c = ChainConsumer().add_chain(data[:, :2], parameters=["$x$", "$y$"], weights=weights, posterior=posterior)
    c.configure(color_params="posterior")
    fig = c.plotter.plot(figsize=3.0)

    fig.set_size_inches(3 + fig.get_size_inches())  # Resize fig for doco. You don't need this.



.. image:: /examples/customisations/images/sphx_glr_plot_colorpoints_003.png
    :alt: $x = 0.0^{+1.1}_{-1.2}$, $y = 0.2^{+1.6}_{-1.3}$
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.410 seconds)


.. _sphx_glr_download_examples_customisations_plot_colorpoints.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_colorpoints.py <plot_colorpoints.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_colorpoints.ipynb <plot_colorpoints.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
