.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_customisations_plot_one_chain.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_examples_customisations_plot_one_chain.py:


=========
One Chain
=========

Plot one chain with parameter names.

Because we are only plotting one chain, we will get
parameter bounds on the marginalised surfaces by
default.



.. image:: /examples/customisations/images/sphx_glr_plot_one_chain_001.png
    :alt: $x = 400^{+220}_{-200}$, $y = 120^{+330}_{-290}$, $\epsilon = 1455^{+96}_{-99}$
    :class: sphx-glr-single-img






.. code-block:: default


    import numpy as np
    from numpy.random import normal, multivariate_normal
    from chainconsumer import ChainConsumer


    np.random.seed(0)
    cov = 1e2 * normal(size=(3, 3))
    data = multivariate_normal(1e3 * normal(size=3), np.dot(cov, cov.T), size=100000)

    # If you pass in parameter labels and only one chain, you can also get parameter bounds
    fig = ChainConsumer().add_chain(data, parameters=["$x$", "$y$", r"$\epsilon$"]).plotter.plot()

    fig.set_size_inches(3 + fig.get_size_inches())  # Resize fig for doco. You don't need this.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.390 seconds)


.. _sphx_glr_download_examples_customisations_plot_one_chain.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_one_chain.py <plot_one_chain.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_one_chain.ipynb <plot_one_chain.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
